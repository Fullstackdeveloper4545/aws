AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FTP to S3 Lambda Handler with SQS Transformer
Parameters:
  S3BucketName:
    Type: String
    Description: S3 bucket name for storing FTP files
    Default: ftp-files-bucket-9824
  SQSQueueName:
    Type: String
    Description: SQS queue name for processing notifications
    Default: ftp-processing-queue
  SourceQueueName:
    Type: String
    Description: SQS queue name for FTP listener notifications
    Default: ftp-listener-queue
  SourceFunctionName:
    Type: String
    Description: FTP Listener Lambda function name
    Default: ftp-listener
  TransformerFunctionName:
    Type: String
    Description: Transformer Lambda function name
    Default: transformer
  PGHost:
    Type: String
    Description: PostgreSQL database host
    Default: localhost
  PGPort:
    Type: String
    Description: PostgreSQL database port
    Default: '5432'
  PGDatabase:
    Type: String
    Description: PostgreSQL database name
    Default: ftp_processor
  PGUsername:
    Type: String
    Description: PostgreSQL database username
    Default: postgres
  PGPassword:
    Type: String
    NoEcho: true
    Description: PostgreSQL database password
    Default: sdlkj67hjvfWE0167VBggF
  EC2KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access
    Default: marium-key
  EC2InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t3.micro
    AllowedValues:
    - t3.micro
    - t3.small
    - t3.medium
  RDSInstanceType:
    Type: String
    Description: RDS instance type
    Default: db.t3.micro
    AllowedValues:
    - db.t3.micro
    - db.t3.small
    - db.t3.medium
  VpcCidr:
    Type: String
    Description: CIDR block for the VPC
    Default: 10.0.0.0/16
  PublicSubnet1Cidr:
    Type: String
    Description: CIDR block for public subnet 1
    Default: 10.0.1.0/24
  PublicSubnet2Cidr:
    Type: String
    Description: CIDR block for public subnet 2
    Default: 10.0.2.0/24
  PrivateSubnet1Cidr:
    Type: String
    Description: CIDR block for private subnet 1
    Default: 10.0.3.0/24
  PrivateSubnet2Cidr:
    Type: String
    Description: CIDR block for private subnet 2
    Default: 10.0.4.0/24
  PrivateSubnet3Cidr:
    Type: String
    Description: CIDR block for private subnet 3 (for Lambda/RDS)
    Default: 10.0.5.0/24
  PrivateSubnet4Cidr:
    Type: String
    Description: CIDR block for private subnet 4 (for Lambda/RDS)
    Default: 10.0.6.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: marium-vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: marium-igw
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: marium-public-subnet-1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: marium-public-subnet-2
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: marium-private-subnet-1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: marium-private-subnet-2
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet3Cidr
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: marium-private-subnet-3
  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet4Cidr
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: marium-private-subnet-4
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: marium-nat-eip
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATGatewayEIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
      - Key: Name
        Value: marium-nat-gateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: marium-public-rt
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: marium-private-rt
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId:
        Ref: NATGateway
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet2
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet3
  PrivateSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet4
  SharedDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: shared-python-packages
      Description: Common Python packages
      ContentUri: SharedDependenciesLayer
      CompatibleRuntimes:
      - python3.9
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.9
      SamResourceId: SharedDependenciesLayer
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: S3BucketName
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
        - Id: DeleteOldFiles
          Status: Enabled
          ExpirationInDays: 365
      NotificationConfiguration:
        QueueConfigurations:
        - Event: s3:ObjectCreated:*
          Queue:
            Fn::GetAtt:
            - SourceQueue
            - Arn
          Filter:
            S3Key:
              Rules:
              - Name: prefix
                Value: uploads/
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Ref: SQSQueueName
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600
  SourceQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Ref: SourceQueueName
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600
  SourceQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
      - Ref: SourceQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action: sqs:SendMessage
          Resource:
            Fn::GetAtt:
            - SourceQueue
            - Arn
          Condition:
            ArnLike:
              aws:SourceArn:
                Fn::Sub: arn:aws:s3:::${S3BucketName}
  SourceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
      - PolicyName: SourcePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            Resource:
              Fn::Sub: arn:aws:s3:::${S3BucketName}/*
          - Effect: Allow
            Action:
            - sqs:SendMessage
            - sqs:GetQueueAttributes
            - sqs:ReceiveMessage
            Resource:
              Fn::GetAtt:
              - SQSQueue
              - Arn
          - Effect: Allow
            Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            Resource:
              Fn::GetAtt:
              - SourceQueue
              - Arn
  TransformerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
      - PolicyName: TransformerPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            Resource:
              Fn::Sub: arn:aws:s3:::${S3BucketName}/*
          - Effect: Allow
            Action:
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            - sqs:ReceiveMessage
            Resource:
              Fn::GetAtt:
              - SQSQueue
              - Arn
  SourceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Ref: SourceFunctionName
      Runtime: python3.9
      Handler: lambda_handler.lambda_handler
      Role:
        Fn::GetAtt:
        - SourceExecutionRole
        - Arn
      CodeUri: SourceFunction
      Timeout: 300
      MemorySize: 512
      Layers:
      - Ref: SharedDependenciesLayer
      Environment:
        Variables:
          S3_BUCKET:
            Ref: S3Bucket
          SQS_QUEUE_URL:
            Ref: SQSQueue
          PG_HOST:
            Fn::GetAtt:
            - RDSInstance
            - Endpoint.Address
          PG_PORT:
            Ref: PGPort
          PG_DB:
            Ref: PGDatabase
          PG_USER:
            Ref: PGUsername
          PG_PASSWORD:
            Ref: PGPassword
      VpcConfig:
        SecurityGroupIds:
        - Ref: LambdaSecurityGroup
        SubnetIds:
        - Ref: PrivateSubnet3
        - Ref: PrivateSubnet4
    Metadata:
      SamResourceId: SourceFunction
  TransformerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Ref: TransformerFunctionName
      Runtime: python3.9
      Handler: lambda_handler.lambda_handler
      Role:
        Fn::GetAtt:
        - TransformerExecutionRole
        - Arn
      CodeUri: TransformerFunction
      Timeout: 300
      MemorySize: 512
      Layers:
      - Ref: SharedDependenciesLayer
      Environment:
        Variables:
          S3_BUCKET:
            Ref: S3Bucket
          PG_HOST:
            Fn::GetAtt:
            - RDSInstance
            - Endpoint.Address
          PG_PORT:
            Ref: PGPort
          PG_DB:
            Ref: PGDatabase
          PG_USER:
            Ref: PGUsername
          PG_PASSWORD:
            Ref: PGPassword
      VpcConfig:
        SecurityGroupIds:
        - Ref: LambdaSecurityGroup
        SubnetIds:
        - Ref: PrivateSubnet3
        - Ref: PrivateSubnet4
    Metadata:
      SamResourceId: TransformerFunction
  SourceSQSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: SourceFunction
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - SourceQueue
        - Arn
  SourceSQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
        Fn::GetAtt:
        - SourceQueue
        - Arn
      FunctionName:
        Ref: SourceFunction
      BatchSize: 1
      Enabled: true
  TransformerSQSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: TransformerFunction
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - SQSQueue
        - Arn
  TransformerSQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
        Fn::GetAtt:
        - SQSQueue
        - Arn
      FunctionName:
        Ref: TransformerFunction
      BatchSize: 1
      Enabled: true
  SourceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${SourceFunctionName}
      RetentionInDays: 30
  TransformerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${TransformerFunctionName}
      RetentionInDays: 30
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS PostgreSQL
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId:
          Ref: EC2SecurityGroup
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId:
          Ref: LambdaSecurityGroup
      Tags:
      - Key: Name
        Value: marium-rds-sg
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS subnet group for private subnets
      SubnetIds:
      - Ref: PrivateSubnet3
      - Ref: PrivateSubnet4
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: marium-postgres
      DBInstanceClass:
        Ref: RDSInstanceType
      Engine: postgres
      EngineVersion: '17.5'
      AllocatedStorage: 20
      StorageType: gp2
      StorageEncrypted: true
      MasterUsername:
        Ref: PGUsername
      MasterUserPassword:
        Ref: PGPassword
      DBName:
        Ref: PGDatabase
      VPCSecurityGroups:
      - Ref: RDSSecurityGroup
      DBSubnetGroupName:
        Ref: RDSSubnetGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      DeletionProtection: false
      Tags:
      - Key: Name
        Value: marium-postgres
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instance
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 8000
        ToPort: 8000
        CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: '0.0.0.0/0'
      Tags:
      - Key: Name
        Value: marium-ec2-sg
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Fn::GetAtt:
        - LatestUbuntuAMI
        - Value
      InstanceType:
        Ref: EC2InstanceType
      KeyName:
        Ref: EC2KeyPairName
      SubnetId:
        Ref: PublicSubnet1
      SecurityGroupIds:
      - Ref: EC2SecurityGroup
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      Tags:
      - Key: Name
        Value: marium-ec2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
      - PolicyName: EC2Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:ListBucket
            Resource:
            - Fn::Sub: arn:aws:s3:::${S3BucketName}
            - Fn::Sub: arn:aws:s3:::${S3BucketName}/*
  LatestUbuntuAMI:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value:
        Fn::Sub: '{{resolve:ssm:/aws/service/canonical/ubuntu/server/24.04/stable/current/amd64/hvm/ebs-gp3/ami-id}}'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: EC2Role
  EC2ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId:
        Ref: EC2Instance
      Tags:
      - Key: Name
        Value: marium-ec2-eip
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId:
        Ref: VPC
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: '0.0.0.0/0'
      Tags:
      - Key: Name
        Value: marium-lambda-sg
Outputs:
  VPCId:
    Description: VPC ID
    Value:
      Ref: VPC
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-VPCId
  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value:
      Ref: PublicSubnet1
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnet1Id
  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value:
      Ref: PublicSubnet2
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnet2Id
  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value:
      Ref: PrivateSubnet1
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet1Id
  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value:
      Ref: PrivateSubnet2
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet2Id
  PrivateSubnet3Id:
    Description: Private Subnet 3 ID (Lambda/RDS)
    Value:
      Ref: PrivateSubnet3
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet3Id
  PrivateSubnet4Id:
    Description: Private Subnet 4 ID (Lambda/RDS)
    Value:
      Ref: PrivateSubnet4
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet4Id
  NATGatewayId:
    Description: NAT Gateway ID
    Value:
      Ref: NATGateway
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-NATGatewayId
  SourceFunctionArn:
    Description: ARN of the FTP Listener Lambda function
    Value:
      Fn::GetAtt:
      - SourceFunction
      - Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-SourceFunctionArn
  TransformerFunctionArn:
    Description: ARN of the Transformer Lambda function
    Value:
      Fn::GetAtt:
      - TransformerFunction
      - Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-TransformerFunctionArn
  S3BucketName:
    Description: Name of the S3 bucket
    Value:
      Ref: S3Bucket
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-S3BucketName
  SQSQueueUrl:
    Description: URL of the SQS queue for transformer
    Value:
      Ref: SQSQueue
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-SQSQueueUrl
  SQSQueueArn:
    Description: ARN of the SQS queue for transformer
    Value:
      Fn::GetAtt:
      - SQSQueue
      - Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-SQSQueueArn
  SourceQueueUrl:
    Description: URL of the SQS queue for FTP listener
    Value:
      Ref: SourceQueue
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-SourceQueueUrl
  SourceQueueArn:
    Description: ARN of the SQS queue for FTP listener
    Value:
      Fn::GetAtt:
      - SourceQueue
      - Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-SourceQueueArn
  RDSInstanceEndpoint:
    Description: RDS PostgreSQL endpoint
    Value:
      Fn::GetAtt:
      - RDSInstance
      - Endpoint.Address
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-RDSInstanceEndpoint
  RDSInstancePort:
    Description: RDS PostgreSQL port
    Value:
      Fn::GetAtt:
      - RDSInstance
      - Endpoint.Port
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-RDSInstancePort
  EC2InstancePublicIP:
    Description: EC2 instance public IP address
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PublicIp
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-EC2InstancePublicIP
  EC2ElasticIP:
    Description: EC2 instance Elastic IP address
    Value:
      Ref: EC2ElasticIP
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-EC2ElasticIP
  EC2SecurityGroupId:
    Description: EC2 instance security group ID
    Value:
      Ref: EC2SecurityGroup
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-EC2SecurityGroupId
  RDSSecurityGroupId:
    Description: RDS security group ID
    Value:
      Ref: RDSSecurityGroup
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-RDSSecurityGroupId
  LambdaSecurityGroupId:
    Description: Lambda functions security group ID
    Value:
      Ref: LambdaSecurityGroup
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-LambdaSecurityGroupId
