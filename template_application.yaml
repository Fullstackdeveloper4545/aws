AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Application Stack - Lambda Functions, SQS (More frequent changes)'

Parameters:
  SQSQueueName:
    Type: String
    Description: SQS queue name for processing notifications
    Default: ftp-processing-queue
  
  TransformerFunctionName:
    Type: String
    Description: Transformer Lambda function name
    Default: transformer

  FTPReaderFunctionName:
    Type: String
    Description: FTP Reader Lambda function name
    Default: ftp-reader

  PGPort:
    Type: String
    Description: PostgreSQL database port
    Default: "5432"
  
  PGDatabase:
    Type: String
    Description: PostgreSQL database name
    Default: ftp_processor
  
  PGUsername:
    Type: String
    Description: PostgreSQL database username
    Default: postgres
  
  PGPassword:
    Type: String
    NoEcho: true
    Description: PostgreSQL database password
    Default: sdlkj67hjvfWE0167VBggF

  APIEndpoint:
    Type: String
    Description: API endpoint
    Default: https://trackageadminbackend.ihrailsoftware.com/api/v1/readers/process_reader_data

  SendGridApiKey:
    Type: String
    NoEcho: true
    Description: SendGrid API key for email notifications
    Default: your-sendgrid-api-key

  SendGridFromEmail:
    Type: String
    Description: From email address for SendGrid notifications
    Default: notifications@yourdomain.com

  SendGridFromName:
    Type: String
    Description: From name for SendGrid notifications
    Default: FTP Reader System

  # Infrastructure Stack Parameters (imported from infrastructure stack)
  InfrastructureStackName:
    Type: String
    Description: Name of the infrastructure stack
    Default: marium-infrastructure

Resources:
  # Shared Dependencies Layer
  SharedDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: shared-python-packages
      Description: Common Python packages
      ContentUri: layer/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.9
      BuildArchitecture: x86_64

  # IAM Role for Transformer Lambda
  TransformerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: TransformerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                Resource: !ImportValue 
                  Fn::Sub: "${InfrastructureStackName}-SQSQueueArn"

  # IAM Role for FTP Reader Lambda
  FTPReaderExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: FTPReaderPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                Resource: !ImportValue 
                  Fn::Sub: "${InfrastructureStackName}-SQSQueueArn"

  # Transformer Lambda Function
  TransformerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref TransformerFunctionName
      Runtime: python3.9
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt TransformerExecutionRole.Arn
      CodeUri: ./transformer
      Timeout: 300
      MemorySize: 512
      Layers:
        - !Ref SharedDependenciesLayer
      Environment:
        Variables:
          PG_HOST: !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-RDSInstanceEndpoint"
          PG_PORT: !Ref PGPort
          PG_DB: !Ref PGDatabase
          PG_USER: !Ref PGUsername
          PG_PASSWORD: !Ref PGPassword
          API_ENDPOINT: !Ref APIEndpoint
          API_TIMEOUT: "30"
          API_HEADERS: "{}"
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-LambdaSecurityGroupId"
        SubnetIds:
          - !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-PrivateSubnet3Id"
          - !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-PrivateSubnet4Id"

  # FTP Reader Lambda Function
  FTPReaderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref FTPReaderFunctionName
      Runtime: python3.9
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt FTPReaderExecutionRole.Arn
      CodeUri: ./ftp_reader
      Timeout: 300
      MemorySize: 512
      Layers:
        - !Ref SharedDependenciesLayer
      Environment:
        Variables:
          SQS_QUEUE_URL: !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-SQSQueueUrl"
          PG_HOST: !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-RDSInstanceEndpoint"
          PG_PORT: !Ref PGPort
          PG_DB: !Ref PGDatabase
          PG_USER: !Ref PGUsername
          PG_PASSWORD: !Ref PGPassword
          FTP_HOST: "your-ftp-server.com"
          FTP_USERNAME: "your-username"
          FTP_PASSWORD: "your-password"
          FTP_PORT: "21"
          FTP_SOURCE_FOLDER: "uploads"
          FTP_DEST_FOLDER: "processed"
          SENDGRID_API_KEY: !Ref SendGridApiKey
          SENDGRID_FROM_EMAIL: !Ref SendGridFromEmail
          SENDGRID_FROM_NAME: !Ref SendGridFromName
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-LambdaSecurityGroupId"
        SubnetIds:
          - !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-PrivateSubnet3Id"
          - !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-PrivateSubnet4Id"

  # EventBridge Rule for FTP Reader (1 minute frequency)
  FTPReaderScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${FTPReaderFunctionName}-schedule-rule"
      Description: "Schedule rule for FTP Reader Lambda function"
      ScheduleExpression: "rate(1 minute)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt FTPReaderFunction.Arn
          Id: !Sub "${FTPReaderFunctionName}-target"

  # Permission for EventBridge to invoke FTP Reader Lambda
  FTPReaderEventBridgePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FTPReaderFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt FTPReaderScheduleRule.Arn

  # SQS Permission for Transformer Lambda
  TransformerSQSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TransformerFunction
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !ImportValue 
        Fn::Sub: "${InfrastructureStackName}-SQSQueueArn"

  # SQS Event Source Mapping for Transformer Lambda
  TransformerSQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !ImportValue 
        Fn::Sub: "${InfrastructureStackName}-SQSQueueArn"
      FunctionName: !Ref TransformerFunction
      BatchSize: 1
      Enabled: true

  # CloudWatch Log Groups
  TransformerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TransformerFunctionName}"
      RetentionInDays: 30

  FTPReaderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${FTPReaderFunctionName}"
      RetentionInDays: 30

Outputs:
  TransformerFunctionArn:
    Description: ARN of the Transformer Lambda function
    Value: !GetAtt TransformerFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-TransformerFunctionArn"

  FTPReaderFunctionArn:
    Description: ARN of the FTP Reader Lambda function
    Value: !GetAtt FTPReaderFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-FTPReaderFunctionArn"

  SQSQueueUrl:
    Description: URL of the SQS queue for transformer (from infrastructure stack)
    Value: !ImportValue 
      Fn::Sub: "${InfrastructureStackName}-SQSQueueUrl"
    Export:
      Name: !Sub "${AWS::StackName}-SQSQueueUrl"

  SQSQueueArn:
    Description: ARN of the SQS queue for transformer (from infrastructure stack)
    Value: !ImportValue 
      Fn::Sub: "${InfrastructureStackName}-SQSQueueArn"
    Export:
      Name: !Sub "${AWS::StackName}-SQSQueueArn"



 