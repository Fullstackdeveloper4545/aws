AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Application Stack - Lambda Functions, SQS, SFTP (More frequent changes)'

Parameters:
  SQSQueueName:
    Type: String
    Description: SQS queue name for processing notifications
    Default: ftp-processing-queue
  
  SourceQueueName:
    Type: String
    Description: SQS queue name for FTP listener notifications
    Default: ftp-listener-queue
  
  SourceFunctionName:
    Type: String
    Description: FTP Listener Lambda function name
    Default: ftp-listener
  
  TransformerFunctionName:
    Type: String
    Description: Transformer Lambda function name
    Default: transformer
  
  PGPort:
    Type: String
    Description: PostgreSQL database port
    Default: "5432"
  
  PGDatabase:
    Type: String
    Description: PostgreSQL database name
    Default: ftp_processor
  
  PGUsername:
    Type: String
    Description: PostgreSQL database username
    Default: postgres
  
  PGPassword:
    Type: String
    NoEcho: true
    Description: PostgreSQL database password
    Default: sdlkj67hjvfWE0167VBggF

  APIEndpoint:
    Type: String
    Description: API endpoint
    Default: https://trackageadminbackend.ihrailsoftware.com/api/v1/readers/process_reader_data

  # SFTP Parameters
  SFTPUsername:
    Type: String
    Description: SFTP username for S3 access
    Default: sftpuser
  
  SFTPPassword:
    Type: String
    NoEcho: true
    Description: SFTP password for S3 access
    Default: SecurePassword123!

  # Infrastructure Stack Parameters (imported from infrastructure stack)
  InfrastructureStackName:
    Type: String
    Description: Name of the infrastructure stack
    Default: marium-infrastructure

  # S3 Bucket Name (imported from infrastructure stack)
  S3BucketName:
    Type: String
    Description: S3 bucket name from infrastructure stack
    Default: ftp-files-bucket-9824

Resources:
  # Shared Dependencies Layer
  SharedDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: shared-python-packages
      Description: Common Python packages
      ContentUri: layer/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.9

  # SQS Queue for Transformer
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref SQSQueueName
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600  # 14 days

  # SQS Queue for FTP Listener
  SourceQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref SourceQueueName
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600  # 14 days

  # SQS Queue Policy to allow S3 notifications
  SourceQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SourceQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt SourceQueue.Arn
            Condition:
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:s3:::${S3BucketName}"

  # IAM Role for FTP Listener Lambda
  SourceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SourcePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                Resource: !GetAtt SQSQueue.Arn
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt SourceQueue.Arn

  # IAM Role for Transformer Lambda
  TransformerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: TransformerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                Resource: !GetAtt SQSQueue.Arn

  # FTP Listener Lambda Function
  SourceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref SourceFunctionName
      Runtime: python3.9
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt SourceExecutionRole.Arn
      CodeUri: ./ftp_listener
      Timeout: 300
      MemorySize: 512
      Layers:
        - !Ref SharedDependenciesLayer
      Environment:
        Variables:
          S3_BUCKET: !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-S3BucketName"
          SQS_QUEUE_URL: !Ref SQSQueue
          PG_HOST: !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-RDSInstanceEndpoint"
          PG_PORT: !Ref PGPort
          PG_DB: !Ref PGDatabase
          PG_USER: !Ref PGUsername
          PG_PASSWORD: !Ref PGPassword
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-LambdaSecurityGroupId"
        SubnetIds:
          - !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-PrivateSubnet3Id"
          - !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-PrivateSubnet4Id"

  # Transformer Lambda Function
  TransformerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref TransformerFunctionName
      Runtime: python3.9
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt TransformerExecutionRole.Arn
      CodeUri: ./transformer
      Timeout: 300
      MemorySize: 512
      Layers:
        - !Ref SharedDependenciesLayer
      Environment:
        Variables:
          S3_BUCKET: !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-S3BucketName"
          PG_HOST: !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-RDSInstanceEndpoint"
          PG_PORT: !Ref PGPort
          PG_DB: !Ref PGDatabase
          PG_USER: !Ref PGUsername
          PG_PASSWORD: !Ref PGPassword
          API_ENDPOINT: !Ref APIEndpoint
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-LambdaSecurityGroupId"
        SubnetIds:
          - !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-PrivateSubnet3Id"
          - !ImportValue 
            Fn::Sub: "${InfrastructureStackName}-PrivateSubnet4Id"

  # SQS Permission for FTP Listener Lambda
  SourceSQSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SourceFunction
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt SourceQueue.Arn

  # SQS Event Source Mapping for FTP Listener Lambda
  SourceSQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt SourceQueue.Arn
      FunctionName: !Ref SourceFunction
      BatchSize: 1
      Enabled: true

  # SQS Permission for Transformer Lambda
  TransformerSQSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TransformerFunction
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt SQSQueue.Arn

  # SQS Event Source Mapping for Transformer Lambda
  TransformerSQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt SQSQueue.Arn
      FunctionName: !Ref TransformerFunction
      BatchSize: 1
      Enabled: true

  # CloudWatch Log Groups
  SourceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SourceFunctionName}"
      RetentionInDays: 30

  TransformerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TransformerFunctionName}"
      RetentionInDays: 30

  # IAM Role for SFTP Server
  SFTPExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: transfer.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSTransferLoggingAccess
      Policies:
        - PolicyName: SFTPPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource: !Sub "arn:aws:s3:::${S3BucketName}"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource: !Sub "arn:aws:s3:::${S3BucketName}"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:GetObjectVersion
                  - s3:DeleteObjectVersion
                Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"

  # SFTP Server
  SFTPServer:
    Type: AWS::Transfer::Server
    Properties:
      IdentityProviderType: SERVICE_MANAGED
      LoggingRole: !GetAtt SFTPExecutionRole.Arn
      EndpointType: PUBLIC
      Protocols:
        - SFTP
      SecurityPolicyName: TransferSecurityPolicy-2024-01
      Tags:
        - Key: Name
          Value: marium-sftp-server

  # SFTP User
  SFTPUser:
    Type: AWS::Transfer::User
    Properties:
      ServerId: !GetAtt SFTPServer.ServerId
      UserName: !Ref SFTPUsername
      Role: !GetAtt SFTPExecutionRole.Arn
      HomeDirectory: !Sub "/${S3BucketName}"
      HomeDirectoryType: PATH
      Tags:
        - Key: Name
          Value: marium-sftp-user

Outputs:
  SourceFunctionArn:
    Description: ARN of the FTP Listener Lambda function
    Value: !GetAtt SourceFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SourceFunctionArn"

  TransformerFunctionArn:
    Description: ARN of the Transformer Lambda function
    Value: !GetAtt TransformerFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-TransformerFunctionArn"

  SQSQueueUrl:
    Description: URL of the SQS queue for transformer
    Value: !Ref SQSQueue
    Export:
      Name: !Sub "${AWS::StackName}-SQSQueueUrl"

  SQSQueueArn:
    Description: ARN of the SQS queue for transformer
    Value: !GetAtt SQSQueue.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SQSQueueArn"

  SourceQueueUrl:
    Description: URL of the SQS queue for FTP listener
    Value: !Ref SourceQueue
    Export:
      Name: !Sub "${AWS::StackName}-SourceQueueUrl"

  SourceQueueArn:
    Description: ARN of the SQS queue for FTP listener
    Value: !GetAtt SourceQueue.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SourceQueueArn"

  SFTPServerId:
    Description: SFTP server ID
    Value: !GetAtt SFTPServer.ServerId
    Export:
      Name: !Sub "${AWS::StackName}-SFTPServerId"

  SFTPServerEndpoint:
    Description: SFTP server endpoint
    Value: !Sub "s-${SFTPServer}.server.transfer.${AWS::Region}.amazonaws.com"
    Export:
      Name: !Sub "${AWS::StackName}-SFTPServerEndpoint"

  SFTPUsername:
    Description: SFTP username
    Value: !Ref SFTPUsername
    Export:
      Name: !Sub "${AWS::StackName}-SFTPUsername" 