# public rds with default vpc security group etc
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'FTP to S3 Lambda Handler with SQS Transformer'

Parameters:
  S3BucketName:
    Type: String
    Description: S3 bucket name for storing FTP files
    Default: ftp-files-bucket-9824
  
  SQSQueueName:
    Type: String
    Description: SQS queue name for processing notifications
    Default: ftp-processing-queue
  
  SourceQueueName:
    Type: String
    Description: SQS queue name for FTP listener notifications
    Default: ftp-listener-queue
  
  SourceFunctionName:
    Type: String
    Description: FTP Listener Lambda function name
    Default: ftp-listener
  
  TransformerFunctionName:
    Type: String
    Description: Transformer Lambda function name
    Default: transformer
  
  PGHost:
    Type: String
    Description: PostgreSQL database host
    Default: localhost
  
  PGPort:
    Type: String
    Description: PostgreSQL database port
    Default: "5432"
  
  PGDatabase:
    Type: String
    Description: PostgreSQL database name
    Default: ftp_processor
  
  PGUsername:
    Type: String
    Description: PostgreSQL database username
    Default: postgres
  
  PGPassword:
    Type: String
    NoEcho: true
    Description: PostgreSQL database password
    Default: sdlkj67hjvfWE0167VBggF

  EC2KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access
    Default: marium-key

  EC2InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium

  RDSInstanceType:
    Type: String
    Description: RDS instance type
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium

  DefaultVpcId:
    Type: String
    Description: Default VPC ID to use for EC2 and RDS

  DefaultSubnetId:
    Type: String
    Description: Default Subnet ID to use for EC2 and RDS

  DefaultSubnetIds:
    Type: String
    Description: Default Subnet IDs to use for RDS subnet group (at least 2 AZs, comma-separated)

  DefaultSecurityGroupId:
    Type: String
    Description: Default Security Group ID for the VPC

  # Docker Application Parameters
  DockerImageName:
    Type: String
    Description: Docker image name to deploy
    Default: your-app:latest

  DockerImageRegistry:
    Type: String
    Description: Docker registry URL (leave empty for Docker Hub)
    Default: ""

  DockerRegistryUsername:
    Type: String
    Description: Docker registry username (if using private registry)
    Default: ""

  DockerRegistryPassword:
    Type: String
    NoEcho: true
    Description: Docker registry password (if using private registry)
    Default: ""

  ApplicationPort:
    Type: String
    Description: Port on which the application runs inside the container
    Default: "8000"

  ApplicationEnvironment:
    Type: String
    Description: Environment variables for the application (JSON format)
    Default: '{"NODE_ENV":"production"}'

Resources:
  # Shared Dependencies Layer
  SharedDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: shared-python-packages
      Description: Common Python packages
      ContentUri: layer/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.9

  # S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldFiles
            Status: Enabled
            ExpirationInDays: 365
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt SourceQueue.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: uploads/

  # SQS Queue for Transformer
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref SQSQueueName
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600  # 14 days

  # SQS Queue for FTP Listener
  SourceQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref SourceQueueName
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600  # 14 days

  # SQS Queue Policy to allow S3 notifications
  SourceQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SourceQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt SourceQueue.Arn

  # IAM Role for FTP Listener Lambda
  SourceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SourcePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                Resource: !GetAtt SQSQueue.Arn
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt SourceQueue.Arn

  # IAM Role for Transformer Lambda
  TransformerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TransformerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                Resource: !GetAtt SQSQueue.Arn

  # FTP Listener Lambda Function
  SourceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref SourceFunctionName
      Runtime: python3.9
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt SourceExecutionRole.Arn
      CodeUri: ./ftp_listener
      Timeout: 300
      MemorySize: 512
      Layers:
        - !Ref SharedDependenciesLayer
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
          SQS_QUEUE_URL: !Ref SQSQueue
          PG_HOST: !GetAtt RDSInstance.Endpoint.Address
          PG_PORT: !Ref PGPort
          PG_DB: !Ref PGDatabase
          PG_USER: !Ref PGUsername
          PG_PASSWORD: !Ref PGPassword

  # Transformer Lambda Function
  TransformerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref TransformerFunctionName
      Runtime: python3.9
      Handler: lambda_handler.lambda_handler
      Role: !GetAtt TransformerExecutionRole.Arn
      CodeUri: ./transformer
      Timeout: 300
      MemorySize: 512
      Layers:
        - !Ref SharedDependenciesLayer
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
          PG_HOST: !GetAtt RDSInstance.Endpoint.Address
          PG_PORT: !Ref PGPort
          PG_DB: !Ref PGDatabase
          PG_USER: !Ref PGUsername
          PG_PASSWORD: !Ref PGPassword

  # SQS Permission for FTP Listener Lambda
  SourceSQSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SourceFunction
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt SourceQueue.Arn

  # SQS Event Source Mapping for FTP Listener Lambda
  SourceSQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt SourceQueue.Arn
      FunctionName: !Ref SourceFunction
      BatchSize: 1
      Enabled: true

  # SQS Permission for Transformer Lambda
  TransformerSQSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TransformerFunction
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt SQSQueue.Arn

  # SQS Event Source Mapping for Transformer Lambda
  TransformerSQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt SQSQueue.Arn
      FunctionName: !Ref TransformerFunction
      BatchSize: 1
      Enabled: true

  # CloudWatch Log Groups
  SourceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SourceFunctionName}"
      RetentionInDays: 30

  TransformerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TransformerFunctionName}"
      RetentionInDays: 30

  # RDS Security Group
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for RDS PostgreSQL allowing all IPs"
      VpcId: !Ref DefaultVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: marium-rds-sg

  # RDS DB Subnet Group
  DefaultSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Default subnet group"
      SubnetIds: !Split [",", !Ref DefaultSubnetIds]

  # RDS PostgreSQL Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: marium-postgres
      DBInstanceClass: !Ref RDSInstanceType
      Engine: postgres
      EngineVersion: '17.5'
      AllocatedStorage: 20
      StorageType: gp2
      StorageEncrypted: true
      MasterUsername: !Ref PGUsername
      MasterUserPassword: !Ref PGPassword
      DBName: !Ref PGDatabase
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DefaultSubnetGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: true
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: marium-postgres

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !GetAtt LatestUbuntuAMI.Value
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref EC2KeyPairName
      SecurityGroupIds:
        - !Ref DefaultSecurityGroupId

      IamInstanceProfile: !Ref EC2InstanceProfile

      Tags:
        - Key: Name
          Value: marium-ec2

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: EC2Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${S3BucketName}"
                  - !Sub "arn:aws:s3:::${S3BucketName}/*"

  # Latest Ubuntu 24.04 LTS AMI
  LatestUbuntuAMI:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value: !Sub "{{resolve:ssm:/aws/service/canonical/ubuntu/server/24.04/stable/current/amd64/hvm/ebs-gp3/ami-id}}"

  # EC2 Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # Elastic IP for EC2 Instance
  EC2ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref EC2Instance
      Tags:
        - Key: Name
          Value: marium-ec2-eip

Outputs:
  SourceFunctionArn:
    Description: ARN of the FTP Listener Lambda function
    Value: !GetAtt SourceFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SourceFunctionArn"

  TransformerFunctionArn:
    Description: ARN of the Transformer Lambda function
    Value: !GetAtt TransformerFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-TransformerFunctionArn"

  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref S3Bucket
    Export:
      Name: !Sub "${AWS::StackName}-S3BucketName"

  SQSQueueUrl:
    Description: URL of the SQS queue for transformer
    Value: !Ref SQSQueue
    Export:
      Name: !Sub "${AWS::StackName}-SQSQueueUrl"

  SQSQueueArn:
    Description: ARN of the SQS queue for transformer
    Value: !GetAtt SQSQueue.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SQSQueueArn"

  SourceQueueUrl:
    Description: URL of the SQS queue for FTP listener
    Value: !Ref SourceQueue
    Export:
      Name: !Sub "${AWS::StackName}-SourceQueueUrl"

  SourceQueueArn:
    Description: ARN of the SQS queue for FTP listener
    Value: !GetAtt SourceQueue.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SourceQueueArn"

  RDSInstanceEndpoint:
    Description: RDS PostgreSQL endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-RDSInstanceEndpoint"

  RDSInstancePort:
    Description: RDS PostgreSQL port
    Value: !GetAtt RDSInstance.Endpoint.Port
    Export:
      Name: !Sub "${AWS::StackName}-RDSInstancePort"

  EC2InstancePublicIP:
    Description: EC2 instance public IP address
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-EC2InstancePublicIP"

  EC2ElasticIP:
    Description: EC2 instance Elastic IP address
    Value: !Ref EC2ElasticIP
    Export:
      Name: !Sub "${AWS::StackName}-EC2ElasticIP"

 